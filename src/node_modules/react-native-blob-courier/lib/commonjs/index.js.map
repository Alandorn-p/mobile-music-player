{"version":3,"names":["BlobCourier","BlobCourierEventEmitter","NativeModules","EventEmitter","NativeEventEmitter","createTaskId","uuid","addProgressListener","taskId","fn","addListener","BLOB_COURIER_PROGRESS_EVENT_NAME","e","parsedEvent","written","parseInt","total","sanitizeSettingsData","input","progressIntervalMilliseconds","sanitizeFetchData","android","filename","headers","ios","method","mimeType","url","settings","request","optionalRequestParameters","dict","fallback","BLOB_FETCH_FALLBACK_PARAMETERS","stringifyPartsValues","parts","stringify","part","type","payload","JSON","map","sanitizeMultipartUploadData","returnResponse","BLOB_MULTIPART_UPLOAD_FALLBACK_PARAMETERS","wrapAbortListener","wrappedFn","signal","originalSignalOnAbort","onabort","ev","call","cancelRequest","console","debug","wrapEmitter","fnOnProgress","emitterSubscription","undefined","result","remove","emitterWrappedFetch","fetchBlob","onProgress","emitterWrappedUpload","uploadBlobFromParts","sanitized","sanitizeMappedMultiparts","uploadBlob","convertMappedMultipartsWithSymbolizedKeysToArray","Promise","reject","uploadParts","absoluteFilePath","multipartName","DEFAULT_FILE_MULTIPART_FIELD_NAME","requestSettings","useDownloadManagerOnAndroid","downloadManagerSettings","downloadManager","useDownloadManager"],"sources":["index.tsx"],"sourcesContent":["/**\n * Copyright (c) Ely Deckers.\n *\n * This source code is licensed under the MPL-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { NativeEventEmitter, NativeModules } from 'react-native';\nimport {\n  BLOB_COURIER_PROGRESS_EVENT_NAME,\n  BLOB_FETCH_FALLBACK_PARAMETERS,\n  BLOB_MULTIPART_UPLOAD_FALLBACK_PARAMETERS,\n  DEFAULT_FILE_MULTIPART_FIELD_NAME,\n} from './Consts';\nimport './Extensions';\nimport type {\n  BlobFetchRequest,\n  BlobRequestSettings,\n  BlobRequestTask,\n  BlobFetchResponse,\n  BlobUploadRequest,\n  BlobUploadResponse,\n  AndroidDownloadManagerSettings,\n  BlobProgressEvent,\n  BlobRequestOnProgress,\n  BlobMultipartMapUploadRequest,\n  BlobMultipartArrayUploadRequest,\n  BlobNamedMultipartArray,\n  BlobMultipartWithName,\n  BlobFetchInput,\n  BlobUploadInput,\n} from './ExposedTypes';\nimport {\n  convertMappedMultipartsWithSymbolizedKeysToArray,\n  sanitizeMappedMultiparts,\n  uuid,\n} from './Utils';\nimport { dict } from './Extensions';\n\ntype BlobCancelNativeInput = BlobRequestTask;\n\ntype BlobFetchNativeInput = BlobFetchInput & BlobRequestTask;\n\ntype BlobUploadNativeInput = BlobUploadInput & BlobRequestTask;\n\ntype BlobUploadMultipartInput = BlobMultipartMapUploadRequest &\n  BlobRequestSettings;\n\ntype BlobUploadMultipartInputWithTask = BlobMultipartMapUploadRequest &\n  BlobRequestSettings &\n  BlobRequestTask;\n\ntype BlobUploadMultipartNativeInput = BlobMultipartArrayUploadRequest &\n  BlobRequestSettings &\n  BlobRequestTask;\n\ntype BlobCourierType = {\n  cancelRequest(input: BlobCancelNativeInput): Promise<{}>;\n  fetchBlob(input: BlobFetchNativeInput): Promise<BlobFetchResponse>;\n  uploadBlob(\n    input: BlobUploadMultipartNativeInput\n  ): Promise<BlobUploadResponse>;\n};\n\nconst { BlobCourier, BlobCourierEventEmitter } = NativeModules;\n\nconst EventEmitter = new NativeEventEmitter(BlobCourierEventEmitter);\n\nconst createTaskId = () => `rnbc-req-${uuid()}`;\n\nconst addProgressListener = (\n  taskId: string,\n  fn: (e: BlobProgressEvent) => void\n) =>\n  EventEmitter.addListener(BLOB_COURIER_PROGRESS_EVENT_NAME, (e: any) => {\n    const parsedEvent: BlobProgressEvent = {\n      written: parseInt(e.written, 10),\n      total: parseInt(e.total, 10),\n    };\n\n    if (e.taskId === taskId) {\n      fn(parsedEvent);\n    }\n  });\n\nconst sanitizeSettingsData = <T extends BlobRequestSettings>(\n  input: Readonly<T>\n) => {\n  const { progressIntervalMilliseconds } = input;\n\n  return {\n    progressIntervalMilliseconds,\n  };\n};\n\nconst sanitizeFetchData = <T extends BlobFetchNativeInput>(\n  input: Readonly<T>\n): BlobFetchNativeInput => {\n  const { android, filename, headers, ios, method, mimeType, taskId, url } =\n    input;\n\n  const settings = sanitizeSettingsData(input);\n\n  const request = {\n    filename,\n    mimeType,\n    url,\n  };\n\n  const optionalRequestParameters = dict({\n    ...settings,\n    android,\n    headers,\n    ios,\n    method,\n  }).fallback(BLOB_FETCH_FALLBACK_PARAMETERS);\n\n  return {\n    ...optionalRequestParameters,\n    ...request,\n    taskId,\n  };\n};\n\nconst stringifyPartsValues = (parts: BlobNamedMultipartArray) => {\n  const stringify = (part: BlobMultipartWithName) =>\n    part.type === 'string' && typeof part.payload === 'object'\n      ? { ...part, payload: JSON.stringify(part.payload) }\n      : part;\n\n  return parts.map(stringify);\n};\n\nconst sanitizeMultipartUploadData = <T extends BlobUploadMultipartNativeInput>(\n  input: Readonly<T>\n): BlobUploadMultipartNativeInput => {\n  const { parts, headers, method, returnResponse, url } = input;\n\n  const { taskId } = input;\n\n  const settings = sanitizeSettingsData(input);\n\n  const request = {\n    mimeType: 'multipart/form-data',\n    parts: stringifyPartsValues(parts),\n    url,\n  };\n\n  const optionalRequestParameters = dict({\n    headers,\n    method,\n    returnResponse,\n  }).fallback(BLOB_MULTIPART_UPLOAD_FALLBACK_PARAMETERS);\n\n  return {\n    ...settings,\n    ...optionalRequestParameters,\n    ...request,\n    taskId,\n  };\n};\n\nconst wrapAbortListener = async <T,>(\n  taskId: string,\n  wrappedFn: () => Promise<T>,\n  signal?: AbortSignal\n) => {\n  if (!signal) {\n    return await wrappedFn();\n  }\n\n  const originalSignalOnAbort = signal.onabort;\n\n  // @ts-ignore: TS2345\n  signal.onabort = (ev: Event) => {\n    if (originalSignalOnAbort) {\n      // @ts-ignore: TS2345\n      originalSignalOnAbort.call(signal, ev);\n    }\n\n    (BlobCourier as BlobCourierType).cancelRequest({ taskId });\n\n    console.debug(`Aborted ${taskId}`);\n  };\n\n  return await wrappedFn();\n};\n\nconst wrapEmitter = async <T,>(\n  taskId: string,\n  wrappedFn: () => Promise<T>,\n  fnOnProgress?: (e: BlobProgressEvent) => void\n) => {\n  const emitterSubscription = fnOnProgress\n    ? addProgressListener(taskId, fnOnProgress)\n    : undefined;\n\n  const result = await wrappedFn();\n\n  emitterSubscription?.remove();\n\n  return result;\n};\n\nconst emitterWrappedFetch = <T extends BlobFetchNativeInput>(\n  input: Readonly<T>\n) =>\n  wrapEmitter(\n    input.taskId,\n    () => (BlobCourier as BlobCourierType).fetchBlob(sanitizeFetchData(input)),\n    input.onProgress\n  );\n\nconst emitterWrappedUpload = <T extends BlobUploadMultipartInputWithTask>(\n  input: Readonly<T>\n) =>\n  wrapEmitter(input.taskId, () => uploadBlobFromParts(input), input.onProgress);\n\nconst fetchBlob = <T extends BlobFetchNativeInput>(input: Readonly<T>) =>\n  wrapAbortListener(\n    input.taskId,\n    () => emitterWrappedFetch(input),\n    input.signal\n  );\n\nconst uploadBlobFromParts = <T extends BlobUploadMultipartInputWithTask>(\n  input: Readonly<T>\n) => {\n  try {\n    const sanitized = sanitizeMappedMultiparts(input.parts);\n\n    return (BlobCourier as BlobCourierType).uploadBlob(\n      sanitizeMultipartUploadData({\n        ...input,\n        parts: convertMappedMultipartsWithSymbolizedKeysToArray(sanitized),\n      })\n    );\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nconst uploadParts = <T extends BlobUploadMultipartInputWithTask>(\n  input: Readonly<T>\n) =>\n  wrapAbortListener(\n    input.taskId,\n    () => emitterWrappedUpload(input),\n    input.signal\n  );\n\nconst uploadBlob = <T extends BlobUploadNativeInput>(input: Readonly<T>) => {\n  const { absoluteFilePath, filename, mimeType, multipartName } = input;\n\n  return uploadParts({\n    ...input,\n    parts: {\n      [multipartName ?? DEFAULT_FILE_MULTIPART_FIELD_NAME]: {\n        payload: {\n          absoluteFilePath,\n          filename,\n          mimeType,\n        },\n        type: 'file',\n      },\n    },\n  });\n};\n\nconst onProgress = (\n  taskId: string,\n  fn: (e: BlobProgressEvent) => void,\n  requestSettings?: BlobRequestSettings\n) => ({\n  fetchBlob: (input: BlobFetchRequest) =>\n    fetchBlob({\n      ...input,\n      ...requestSettings,\n      onProgress: fn,\n      taskId,\n    }),\n  uploadBlob: (input: BlobUploadRequest) =>\n    uploadBlob({\n      ...input,\n      ...requestSettings,\n      onProgress: fn,\n      taskId,\n    }),\n  uploadParts: (input: BlobUploadMultipartInput) =>\n    uploadParts({\n      ...input,\n      ...requestSettings,\n      onProgress: fn,\n      taskId,\n    }),\n  useDownloadManagerOnAndroid: (\n    downloadManagerSettings?: AndroidDownloadManagerSettings\n  ) =>\n    useDownloadManagerOnAndroid(taskId, downloadManagerSettings, {\n      ...requestSettings,\n      onProgress: fn,\n    }),\n});\n\nconst useDownloadManagerOnAndroid = (\n  taskId: string,\n  downloadManagerSettings?: AndroidDownloadManagerSettings,\n  requestSettings?: BlobRequestSettings & BlobRequestOnProgress\n) => ({\n  fetchBlob: (input: BlobFetchRequest) =>\n    fetchBlob({\n      ...input,\n      ...requestSettings,\n      android: {\n        downloadManager: downloadManagerSettings,\n        useDownloadManager: true,\n      },\n      taskId,\n    }),\n});\n\nconst settings = (taskId: string, requestSettings: BlobRequestSettings) => ({\n  fetchBlob: (input: BlobFetchRequest) =>\n    fetchBlob({\n      ...input,\n      ...requestSettings,\n      taskId,\n    }),\n  onProgress: (fn: (e: BlobProgressEvent) => void) =>\n    onProgress(taskId, fn, requestSettings),\n  uploadBlob: (input: BlobUploadRequest) =>\n    uploadBlob({\n      ...input,\n      ...requestSettings,\n      taskId,\n    }),\n  uploadParts: (input: BlobUploadMultipartInput) =>\n    uploadParts({\n      ...input,\n      ...requestSettings,\n      taskId,\n    }),\n  useDownloadManagerOnAndroid: (\n    downloadManagerSettings?: AndroidDownloadManagerSettings\n  ) =>\n    useDownloadManagerOnAndroid(\n      taskId,\n      downloadManagerSettings,\n      requestSettings\n    ),\n});\n\nexport default {\n  fetchBlob: (input: BlobFetchInput) =>\n    fetchBlob({ ...input, taskId: createTaskId() }),\n  onProgress: (fn: (e: BlobProgressEvent) => void) =>\n    onProgress(createTaskId(), fn),\n  settings: (input: BlobRequestSettings) => settings(createTaskId(), input),\n  uploadBlob: (input: BlobUploadInput) =>\n    uploadBlob({ ...input, taskId: createTaskId() }),\n  uploadParts: (input: BlobUploadMultipartInput) =>\n    uploadParts({ ...input, taskId: createTaskId() }),\n  useDownloadManagerOnAndroid: (\n    downloadManagerSettings: AndroidDownloadManagerSettings\n  ) => useDownloadManagerOnAndroid(createTaskId(), downloadManagerSettings),\n};\n\nexport * from './ExposedTypes';\nexport * from './ExposedConsts';\n"],"mappings":"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"}